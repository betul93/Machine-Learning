# -*- coding: utf-8 -*-
"""blood_cancer_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MREaL9zchVpWrmQp826m1GIFoVgucRQ_

# **Kaggle API Installation**
"""

from google.colab import files
uploaded = files.upload()

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/

"""### **API Authorization**


"""

!chmod 600 ~/.kaggle/kaggle.json

"""**Downloading the Data Set**"""

!kaggle datasets download -d unclesamulus/blood-cells-image-dataset

"""# **Removing the Data Set**"""

!unzip blood-cells-image-dataset.zip -d ./blood-cells-image-dataset

import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator


train_data_dir = './blood-cells-image-dataset/bloodcells_dataset/'


train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)


batch_size = 32
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='categorical')


class_names = train_generator.class_indices
print(class_names)

"""**Model Creation,Training,Predictions,Decision Tree Model**"""

import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Data path
train_data_dir = './blood-cells-image-dataset/bloodcells_dataset/'

# Data augmentation and preprocessing
train_datagen = ImageDataGenerator(
    rescale=1./255,  # Rescale pixel values to the [0, 1] range
    shear_range=0.2,  # Shear range
    zoom_range=0.2,  # Zoom range
    horizontal_flip=True)  # Horizontal flip

# Data loader
batch_size = 32
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(224, 224),  # Image size
    batch_size=batch_size,
    class_mode='categorical')  # Class mode

# Model creation and training
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(512, activation='relu'),
    layers.Dense(8, activation='softmax')  # Output layer for 8 classes
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

epochs = 3
model.fit(
    train_generator,
    epochs=epochs,
    steps_per_epoch=train_generator.samples // batch_size
)

# Get predictions
test_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=False)  # Get predictions without shuffling

predictions = model.predict(test_generator)

# Get true class labels
y_true_labels = test_generator.classes

# Convert predictions to class labels
y_pred_labels = np.argmax(predictions, axis=1)

# Create Decision Tree model
tree_model = DecisionTreeClassifier()

# Train Decision Tree model using predictions of the deep learning model
tree_model.fit(predictions, y_true_labels)

# Evaluate Decision Tree model
tree_predictions = tree_model.predict(predictions)
accuracy = accuracy_score(y_true_labels, tree_predictions)
print(f"Decision Tree Model Accuracy: {accuracy}")

"""**Classification Report**"""

# Import the required function
from sklearn.metrics import classification_report

# Generate classification report
report = classification_report(y_true_labels, tree_predictions, target_names=test_generator.class_indices.keys())
print(report)

"""**SAVE MODEL**"""

model.save('blood_cell_model.h5')

"""**Loading the Model and Making Predictions**"""

from tensorflow.keras.models import load_model

# Modeli y√ºkle
loaded_model = load_model('blood_cell_model.h5')

# Tahminler alma
test_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=False)  # Get predictions without shuffling

predictions = loaded_model.predict(test_generator)

# Get true class labels
y_true_labels = test_generator.classes

# Convert predictions to class labels
y_pred_labels = np.argmax(predictions, axis=1)

# Create Decision Tree model
tree_model = DecisionTreeClassifier()

# Train Decision Tree model using predictions of the deep learning model
tree_model.fit(predictions, y_true_labels)

# Evaluate Decision Tree model
tree_predictions = tree_model.predict(predictions)
accuracy = accuracy_score(y_true_labels, tree_predictions)
print(f"Decision Tree Model Accuracy: {accuracy}")

# Generate classification report
report = classification_report(y_true_labels, tree_predictions, target_names=test_generator.class_indices.keys())
print(report)